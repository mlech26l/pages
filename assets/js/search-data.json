{
  
    
        "post0": {
            "title": "Title",
            "content": "# &quot;Notebook test&quot; &gt; &quot;Test example&quot; - toc:true- branch: master- badges: true- comments: true - author: Mathias Lechner - categories: [fastpages, jupyter] . File &#34;&lt;ipython-input-2-f0f771a6e661&gt;&#34;, line 2 &gt; &#34;Test example&#34; ^ SyntaxError: invalid syntax . Year GPU Gen Memory Compute Tensor cores Node . 0 2010-11-01 | GTX 580 | Fermi | 1.5GB | 1.581 | False | 40nm | . 1 2012-02-01 | GTX 680 | Kepler | 2GB | 3.250 | False | 28nm | . 2 2013-10-01 | K40 | Kepler | 12GB | 5.046 | False | 28nm | . 3 2014-02-01 | Titan Black | Kepler | 6GB | 5.645 | False | 28nm | . 4 2014-11-01 | K80 | Kepler | 2x12GB | 8.226 | False | 28nm | . 5 2015-06-01 | GTX 980 Ti | Maxwell | 6GB | 6.060 | False | 28nm | . 6 2015-11-01 | M40 | Maxwell | 12GB | 6.844 | False | 28nm | . 7 2016-05-01 | GTX 1080 | Pascal | 8GB | 8.873 | False | 16nm | . 8 2016-06-01 | P100 | Pascal | 16GB | 9.526 | False | 16nm | . 9 2017-03-01 | GTX 1080Ti | Pascal | 11GB | 11.340 | False | 16nm | . 10 2017-12-01 | Titan V | Volta | 12GB | 14.900 | True | 12nm | . 11 2018-03-01 | V100 | Volta | 16/32GB | 14.130 | True | 12nm | . 12 2018-11-01 | RTX 2080 Ti | Turing | 12GB | 13.450 | True | 12nm | . 13 2018-12-01 | Titan RTX | Turing | 24GB | 16.310 | True | 12nm | . 14 2020-05-01 | A100 | Ampere | 40GB | 19.490 | True | 7nm | . alt.Chart(df).mark_circle(size=60).encode( alt.X(&#39;Year:T&#39;,scale=alt.Scale(domain=(pd.Timestamp(2010,1,1), pd.Timestamp(2020,6,1)))), y=alt.Y(&#39;Compute&#39;,axis=alt.Axis(title=&quot;float32 TFPLOS&quot;)), color=&#39;Gen&#39;, tooltip=[&#39;GPU&#39;,&#39;Node&#39;,&#39;Compute&#39;,&#39;Gen&#39;,&#39;Memory&#39;,&#39;Tensor cores&#39;] ).interactive() .",
            "url": "https://mlech26l.github.io/pages/2020/06/06/gpu.html",
            "relUrl": "/2020/06/06/gpu.html",
            "date": " • Jun 6, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Distinguished Young Alumnus-Award",
            "content": "I won the Distinguished Young Alumnus-Award at the Epilog for my master thesis Brain-inspired Neural Control. The award was given by the TU Wien faculty of Informatics and is endowed 1.500 EUR. . .",
            "url": "https://mlech26l.github.io/pages/2018/01/20/epilog.html",
            "relUrl": "/2018/01/20/epilog.html",
            "date": " • Jan 20, 2018"
        }
        
    
  
    
        ,"post2": {
            "title": "Tikz and Videos",
            "content": "I am a really big fan of Vector graphics and I exhaustively use Tikz to draw such. However, creating videos and cool animations with Tikz and Latex can be a bit messy. So I have come up with a simple but effective hack to make generating videos with Latex easier. . The key idea is to have two separated Latex files: One that is manually created and stays the same over the whole video, and one that is procedurally generated for each frame. The manual one is created as you would do usually write your Latex image. However, all variables that are dynamic throughout the video (e.g. color, position, opacity, etc.) are defined by placeholders. And, guess what, the second Latex file (the procedurally generated one) then fills all the placeholder for each frame. . Drawing a frame . My starting point is the manually designed Latex file, that is based on the following scheme: . documentclass[border=0cm,convert={outext=.png}]{standalone} % Documentclass to directly create a PNG-files when invoking &#39;pdflatex&#39; usepackage{xcolor} usepackage{tikz} % Load dynamic variables input{dynamic.tex} begin{document} begin{tikzpicture} % My Latex code node (start) at (0,0) [draw,fill= mycolorsin] {A}; node (start) at (2,0) [draw,fill= mycolorcos] {B}; end{tikzpicture} end{document} . In this case a two nodes are drawn, which colors ( mycolor) should be animated. . . Filling the placeholders . In the next step I will create a simple python script that generates the dynamic.tex file and fills all the dynamic placeholder variables. Moreover, the program invokes the Latex compiler to generate a PNG file out of the code and stores it in a directory. . import numpy as np import time import os import subprocess import shutil # Create directory for the frames if not os.path.exists(&#39;sequence&#39;): os.makedirs(&#39;sequence&#39;) # Example data for animation in range [0,100] t = np.linspace(0,2*np.pi,100) sin_seq = 50.0*np.sin(t)+50.0 cos_seq = 50.0*np.cos(t)+50.0 # Loop over each frame for i in range(100): # Create file with for dynamic variables dynamic_file = open(&#39;dynamic.tex&#39;,&#39;w&#39;) dynamic_file.write(&#39; newcommand{ mycolorsin}{green!&#39;+str(int(round(sin_seq[i])))+&#39;!white} n&#39;) dynamic_file.write(&#39; newcommand{ mycolorcos}{red!&#39;+str(int(round(cos_seq[i])))+&#39;!white} n&#39;) dynamic_file.close() # Create png with pdflatex os.system(&#39;pdflatex -shell-escape -interaction=nonstopmode example.tex&#39;) # Move frame into directory with frames shutil.move(&#39;example.png&#39;, &#39;sequence/frame_&#39;+str(i).zfill(3)+&#39;.png&#39;) . Finally, all I have to do is to animate the frames with ImageMagick . convert -loop 0 -delay 2 sequence/*.png animation.gif . . Remarks . Instead of using newcommand for each placeholder, it might be more convinient to use tikzset or tikzstyle (See here) to define the dynamic variables | If you want to create a video instead of an animation (mp4 instead of gif), you can easily do this with ffmpeg | Technically the gif animation is not a vector graphics anymore. However by tuning the pdf-to-png conversion density parameter, one can create an animation with an arbitrary high resolution. | .",
            "url": "https://mlech26l.github.io/pages/2017/11/29/tikz_and_videos.html",
            "relUrl": "/2017/11/29/tikz_and_videos.html",
            "date": " • Nov 29, 2017"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": ". I am a PhD candidate at IST Austria at the research group of Tom Henzinger. My research topics are Machine Learning, Formal Methods, and Robotics. . Publications . ICML (2020) The Natural Lottery Ticket Winner: Reinforcement Learning with Ordinary Neural Circuits | IJCAR (2020) An SMT Theory of Fixed-Point Arithmetic | ICLR (2020) Learning Representations for binary classification without backpropagation | ICRA (2020) Gershgorin Loss Stabilizes the Recurrent Neural Network Compartment of an End-To-End Robot Learning Scheme | TACAS (2020) How Many Bits Does it Take to Quantize Your Neural Network? | ICRA (2019) Designing Worm-inspired Neural Networks for Interpretable Robotic Control | . Awards . Distinguished Young Alumnus-Award 2018 Faculty of Informatics at TU Wien .",
          "url": "https://mlech26l.github.io/pages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}